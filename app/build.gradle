apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "com.dhaspject"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.lin.aopdemotest"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{

        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "org.aspectj:aspectjrt:$aspectjtools_version"
    implementation project(':api_log')
    implementation project(':other_lib')
}
afterEvaluate {
    def isAndroidLibrary = project.plugins.hasPlugin("com.android.library")
    def variants = isAndroidLibrary ? project.android.libraryVariants : project.android.applicationVariants

    variants.all { variant ->
        variant.outputs.all { output ->
            JavaCompile javaCompile = variant.getJavaCompileProvider().get()
            javaCompile.doLast {
                println("i am finish=="+javaCompile.getName())
            }
            javaCompile.dependsOn()

            def kotlinCompileTask = project.tasks.findByName("compileDebugKotlin")
            println("i am finish begin =="+kotlinCompileTask)
            if (kotlinCompileTask != null) {
                kotlinCompileTask.doLast {
                    println("i am finish 21==")
                }
            }
        }
    }
}

laop{
    kotlinfiles("com.lin")
    javafiles("com.lin")
    aopModule("api_log")
    aopType("debug")
    hasFlavors(true)
}